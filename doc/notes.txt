    1. Создаём миграции

    2. Запускаем (отправляем миграции в БД) командой:
php artisan migrate

    3. Создаем seeders для заполнения данными, БД

    4. Запускаем (отправляем данные в БД) командой:
php artisan DB:seed

    5. Создадим ф-л с настройками
config/params.php - который будет возвращать массив настроек (массив инфы пароль/пагинация/email/login/name и др.)

    6. Создадим ф-л
config/init.php
    (ф-л будет содержать настройки: константы к примеру переменная которая содержит опред. путь)

    7. Теперь подключим этот ф-л init.php к проекту, для этого перейдём в ф-л
public/index.php
    и пропишем скрипт для его init.php подключения
require_once __DIR__ . '/../config/init.php';

    8. Далее необх. запутить этот ф-л в автозагрузку для этого перейдём в ф-л
composer.json
    в "autoload": создадим новый массив "files": ["config/init.php"],

    9. Далее обновим composer (пропишем в терминале команду)
composer update

    После обновления composer перейдём в ф-л
config/init.php

    10. И с пом. dd выведем на главной странице наш localhost (обновим http://localhost/index.php)
dd($allowed_hosts);

    Таким образом мы уже можем использовать наши костанты там, где нам это нужно к прим. @php echo ROOT @endphp

    11. Немного изменим путь в ф-ле
config/init.php
    для этого создадим переменную в $app_path в которой с пом. метода preg_replace - вырезает всё что не нужно из строки
    нашего пути ("#[^/]+$#", и передадим сюда нашу переменную '', $allowed_hosts);

    // объявим 2 константы
    // в константу 'PATH' объявим переменную $app_path

    // и в константу 'ADMIN' запишем  PATH . 'admin/index'

    12. Далее идём в ф-л
public/index.php
    и пропишем скрипт для его params.php подключения
require_once __DIR__ . '/../config/params.php';

    13. Далее идём в ф-л
composer.json
    И вставляем в autoload след. массивы:
"autoload": {
        "files": [
            "config/init.php",
            "config/params.php"

"classmap": [
            "database/seeders",      // в примере 5.8 lar "database/seeds",
            "database/factories",
            "app/SBlog/Core" - и так как такой директории не существует при composer update - выдаст ошибку     ]
    Если сейчас выполнить composer update - выдаст ошибку, по этому перейдём в каталог app

    14. И в нём создадим каталог SBlog - как в пути из вышеук. массива и в ней создаём каталог Core

    15. Далее снова обновляем composer
composer update

    16. Создадим train класс TSingletone
SBlog/Core/TSingletone.php
    И в нём мы сэмулируем паттерн Singletone - это паттерн который гарантирет создание одного экземпляра класса
    (сделаем так что он будет возвращать себя же)

    17. Создадим ещё один класс (обычный класс - не train)
app/SBlog/Core/Registry.php
    И в нём же используем TSingletone

    18. Создадим ещё один класс
    в котором объявим публичное статическое поле $app
app/SBlog/Core/BlogApp.php

    19. Далее идём в ф-л
public/index.php
    И подключим наш класс new \App\Sblog\Core\BlogApp();

    // данный скрипт в ф-ле resources/views/home.blade.php выводит значение по ключу 'login' из ф-ла params.php
    // таким образом можно выводить какие то пар-ры из ф-ла params.php в тех вьюхах где это необходимо
@php
    $p= \App\SBlog\Core\BlogApp::get_instance()->getProperty('login');
    dd($p);
@endphp
